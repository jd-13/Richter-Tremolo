/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
RichterAudioProcessor::RichterAudioProcessor()
{
    mRichter.LFO1.setBypassSwitch(LFOSWITCH_DEFAULT);
    mRichter.LFO1.setPhaseSyncSwitch(PHASESYNC_DEFAULT);
    mRichter.LFO1.setTempoSyncSwitch(TEMPOSYNC_DEFAULT);
    mRichter.LFO1.setWave(WAVE_DEFAULT);
    mRichter.LFO1.setDepth(DEPTH_DEFAULT);
    mRichter.LFO1.setDepthMod(DEPTHMOD_DEFAULT);
    mRichter.LFO1.setFreq(FREQ_DEFAULT);
    mRichter.LFO1.setFreqMod(FREQMOD_DEFAULT);
    mRichter.LFO1.setManualPhase(PHASE_DEFAULT);
    mRichter.LFO1.setTempoNumer(TEMPONUMER_DEFAULT);
    mRichter.LFO1.setTempoDenom(TEMPODENOM_DEFAULT);
    
    mRichter.LFO2.setBypassSwitch(LFOSWITCH_DEFAULT);
    mRichter.LFO2.setPhaseSyncSwitch(PHASESYNC_DEFAULT);
    mRichter.LFO2.setTempoSyncSwitch(TEMPOSYNC_DEFAULT);
    mRichter.LFO2.setWave(WAVE_DEFAULT);
    mRichter.LFO2.setDepth(DEPTH_DEFAULT);
    mRichter.LFO2.setDepthMod(DEPTHMOD_DEFAULT);
    mRichter.LFO2.setFreq(FREQ_DEFAULT);
    mRichter.LFO2.setFreqMod(FREQMOD_DEFAULT);
    mRichter.LFO2.setManualPhase(PHASE_DEFAULT);
    mRichter.LFO2.setTempoNumer(TEMPONUMER_DEFAULT);
    mRichter.LFO2.setTempoDenom(TEMPODENOM_DEFAULT);
    
    mRichter.MOD1.setBypassSwitch(LFOSWITCH_DEFAULT);
    mRichter.MOD1.setPhaseSyncSwitch(PHASESYNC_DEFAULT);
    mRichter.MOD1.setTempoSyncSwitch(TEMPOSYNC_DEFAULT);
    mRichter.MOD1.setWave(WAVE_DEFAULT);
    mRichter.MOD1.setDepth(DEPTH_DEFAULT);
    mRichter.MOD1.setFreq(FREQ_DEFAULT);
    mRichter.MOD1.setManualPhase(PHASE_DEFAULT);
    mRichter.MOD1.setTempoNumer(TEMPONUMER_DEFAULT);
    mRichter.MOD1.setTempoDenom(TEMPODENOM_DEFAULT);
    
    mRichter.MOD2.setBypassSwitch(LFOSWITCH_DEFAULT);
    mRichter.MOD2.setPhaseSyncSwitch(PHASESYNC_DEFAULT);
    mRichter.MOD2.setTempoSyncSwitch(TEMPOSYNC_DEFAULT);
    mRichter.MOD2.setWave(WAVE_DEFAULT);
    mRichter.MOD2.setDepth(DEPTH_DEFAULT);
    mRichter.MOD2.setFreq(FREQ_DEFAULT);
    mRichter.MOD2.setManualPhase(PHASE_DEFAULT);
    mRichter.MOD2.setTempoNumer(TEMPONUMER_DEFAULT);
    mRichter.MOD2.setTempoDenom(TEMPODENOM_DEFAULT);
    
    mRichter.setStereo(STEREO_DEFAULT);
    mRichter.setMasterVol(MASTERVOL_DEFAULT);
    
    UIUpdateFlag = true;
    
}

RichterAudioProcessor::~RichterAudioProcessor()
{
}

//==============================================================================
const String RichterAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int RichterAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float RichterAudioProcessor::getParameter (int index)
{
    switch (index) {
        case bypassSwitchLFO1:
            return mRichter.LFO1.getBypassSwitch();
            
        case phaseSyncLFO1:
            return mRichter.LFO1.getPhaseSyncSwitch();
            
        case tempoSyncLFO1:
            return mRichter.LFO1.getTempoSyncSwitch();
            
        case waveLFO1:
            return mRichter.LFO1.getWave();
            
        case depthLFO1:
            return TranslateParam_Inter2Norm(mRichter.LFO1.getRawDepth(), DEPTH_MIN, DEPTH_MAX);
            
        case depthModLFO1:
            return TranslateParam_Inter2Norm(mRichter.LFO1.getDepthMod(), DEPTHMOD_MIN, DEPTHMOD_MAX);
            
        case freqLFO1:
            return TranslateParam_Inter2Norm(mRichter.LFO1.getRawFreq(), FREQ_MIN, FREQ_MAX);
            
        case freqModLFO1:
            return TranslateParam_Inter2Norm(mRichter.LFO1.getFreqMod(), FREQMOD_MIN, FREQMOD_MAX);
            
        case phaseLFO1:
            return TranslateParam_Inter2Norm(mRichter.LFO1.getManualPhase(), PHASE_MIN, PHASE_MAX);
            
        case tempoNumerLFO1:
            return mRichter.LFO1.getTempoNumer();
            
        case tempoDenomLFO1:
            return mRichter.LFO1.getTempoDenom();
            
            
          
            
            
        case bypassSwitchLFO2:
            return mRichter.LFO2.getBypassSwitch();
            
        case phaseSyncLFO2:
            return mRichter.LFO2.getPhaseSyncSwitch();
            
        case tempoSyncLFO2:
            return mRichter.LFO2.getTempoSyncSwitch();
            
        case waveLFO2:
            return mRichter.LFO2.getWave();
            
        case depthLFO2:
            return TranslateParam_Inter2Norm(mRichter.LFO2.getRawDepth(), DEPTH_MIN, DEPTH_MAX);
            
        case depthModLFO2:
            return TranslateParam_Inter2Norm(mRichter.LFO2.getDepthMod(), DEPTHMOD_MIN, DEPTHMOD_MAX);
            
        case freqLFO2:
            return TranslateParam_Inter2Norm(mRichter.LFO2.getRawFreq(), FREQ_MIN, FREQ_MAX);
            
        case freqModLFO2:
            return TranslateParam_Inter2Norm(mRichter.LFO2.getFreqMod(), FREQMOD_MIN, FREQMOD_MAX);
            
        case phaseLFO2:
            return TranslateParam_Inter2Norm(mRichter.LFO2.getManualPhase(), PHASE_MIN, PHASE_MAX);
            
        case tempoNumerLFO2:
            return mRichter.LFO2.getTempoNumer();
            
        case tempoDenomLFO2:
            return mRichter.LFO2.getTempoDenom();
            
            
            
            
            
            
        case bypassSwitchMOD1:
            return mRichter.MOD1.getBypassSwitch();
            
        case phaseSyncMOD1:
            return mRichter.MOD1.getPhaseSyncSwitch();
            
        case tempoSyncMOD1:
            return mRichter.MOD1.getTempoSyncSwitch();
            
        case waveMOD1:
            return mRichter.MOD1.getWave();
            
        case depthMOD1:
            return TranslateParam_Inter2Norm(mRichter.MOD1.getDepth(), DEPTH_MIN, DEPTH_MAX);
            
        case freqMOD1:
            return TranslateParam_Inter2Norm(mRichter.MOD1.getFreq(), FREQ_MIN, FREQ_MAX);
            
        case phaseMOD1:
            return TranslateParam_Inter2Norm(mRichter.MOD1.getManualPhase(), PHASE_MIN, PHASE_MAX);
            
        case tempoNumerMOD1:
            return mRichter.MOD1.getTempoNumer();
            
        case tempoDenomMOD1:
            return mRichter.MOD1.getTempoDenom();
            
            
           
            
            
            
            
        case bypassSwitchMOD2:
            return mRichter.MOD2.getBypassSwitch();
            
        case phaseSyncMOD2:
            return mRichter.MOD2.getPhaseSyncSwitch();
            
        case tempoSyncMOD2:
            return mRichter.MOD2.getTempoSyncSwitch();
            
        case waveMOD2:
            return mRichter.MOD2.getWave();
            
        case depthMOD2:
            return TranslateParam_Inter2Norm(mRichter.MOD2.getDepth(), DEPTH_MIN, DEPTH_MAX);
            
        case freqMOD2:
            return TranslateParam_Inter2Norm(mRichter.MOD2.getFreq(), FREQ_MIN, FREQ_MAX);
            
        case phaseMOD2:
            return TranslateParam_Inter2Norm(mRichter.MOD2.getManualPhase(), PHASE_MIN, PHASE_MAX);
            
        case tempoNumerMOD2:
            return mRichter.MOD2.getTempoNumer();
            
        case tempoDenomMOD2:
            return mRichter.MOD2.getTempoDenom();
            
            
            
        case stereo:
            return mRichter.getStereo();
            
        case masterVol:
            return TranslateParam_Inter2Norm(mRichter.getMasterVol(), MASTERVOL_MIN, MASTERVOL_MAX);
            
            
            
        default:
            return 0.0f;
            
    }
    
}

void RichterAudioProcessor::setParameter (int index, float newValue)
{
    switch (index) {
        case bypassSwitchLFO1:
            mRichter.LFO1.setBypassSwitch(newValue < 0.5 ? true : false);
            break;
            
        case phaseSyncLFO1:
            mRichter.LFO1.setPhaseSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case tempoSyncLFO1:
            mRichter.LFO1.setTempoSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case waveLFO1:
            mRichter.LFO1.setWave(round(newValue));
            break;
            
        case depthLFO1:
            mRichter.LFO1.setRawDepth(TranslateParam_Norm2Inter(newValue, DEPTH_MIN, DEPTH_MAX));
            break;
            
        case depthModLFO1:
            mRichter.LFO1.setDepthMod(TranslateParam_Norm2Inter(newValue, DEPTHMOD_MIN, DEPTHMOD_MAX));
            break;
            
        case freqLFO1:
            mRichter.LFO1.setRawFreq(TranslateParam_Norm2Inter(newValue, FREQ_MIN, FREQ_MAX));
            break;
            
        case freqModLFO1:
            mRichter.LFO1.setFreqMod(TranslateParam_Norm2Inter(newValue, FREQMOD_MIN, FREQMOD_MAX));
            break;
            
        case phaseLFO1:
            mRichter.LFO1.setManualPhase(TranslateParam_Norm2Inter(newValue, PHASE_MIN, PHASE_MAX));
            break;
            
        case tempoNumerLFO1:
            mRichter.LFO1.setTempoNumer(newValue);
            break;
            
        case tempoDenomLFO1:
            mRichter.LFO1.setTempoDenom(newValue);
            break;
            
            
            
            
            
        case bypassSwitchLFO2:
            mRichter.LFO2.setBypassSwitch(newValue < 0.5 ? true : false);
            break;
            
        case phaseSyncLFO2:
            mRichter.LFO2.setPhaseSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case tempoSyncLFO2:
            mRichter.LFO2.setTempoSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case waveLFO2:
            mRichter.LFO2.setWave(round(newValue));
            break;
            
        case depthLFO2:
            mRichter.LFO2.setRawDepth(TranslateParam_Norm2Inter(newValue, DEPTH_MIN, DEPTH_MAX));
            break;
            
        case depthModLFO2:
            mRichter.LFO2.setDepthMod(TranslateParam_Norm2Inter(newValue, DEPTHMOD_MIN, DEPTHMOD_MAX));
            break;
            
        case freqLFO2:
            mRichter.LFO2.setRawFreq(TranslateParam_Norm2Inter(newValue, FREQ_MIN, FREQ_MAX));
            break;
            
        case freqModLFO2:
            mRichter.LFO2.setFreqMod(TranslateParam_Norm2Inter(newValue, FREQMOD_MIN, FREQMOD_MAX));
            break;
            
        case phaseLFO2:
            mRichter.LFO2.setManualPhase(TranslateParam_Norm2Inter(newValue, PHASE_MIN, PHASE_MAX));
            break;
            
        case tempoNumerLFO2:
            mRichter.LFO2.setTempoNumer(newValue);
            break;
            
        case tempoDenomLFO2:
            mRichter.LFO2.setTempoDenom(newValue);
            break;
            
            
            
            
            
        case bypassSwitchMOD1:
            mRichter.MOD1.setBypassSwitch(newValue < 0.5 ? true : false);
            break;
            
        case phaseSyncMOD1:
            mRichter.MOD1.setPhaseSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case tempoSyncMOD1:
            mRichter.MOD1.setTempoSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case waveMOD1:
            mRichter.MOD1.setWave(round(newValue));
            break;
            
        case depthMOD1:
            mRichter.MOD1.setDepth(TranslateParam_Norm2Inter(newValue, DEPTH_MIN, DEPTH_MAX));
            break;
            
        case freqMOD1:
            mRichter.MOD1.setFreq(TranslateParam_Norm2Inter(newValue, FREQ_MIN, FREQ_MAX));
            break;
            
        case phaseMOD1:
            mRichter.MOD1.setManualPhase(TranslateParam_Norm2Inter(newValue, PHASE_MIN, PHASE_MAX));
            break;
            
        case tempoNumerMOD1:
            mRichter.MOD1.setTempoNumer(newValue);
            break;
            
        case tempoDenomMOD1:
            mRichter.MOD1.setTempoDenom(newValue);
            break;
            
            
            
            
            
        case bypassSwitchMOD2:
            mRichter.MOD2.setBypassSwitch(newValue < 0.5 ? true : false);
            break;
            
        case phaseSyncMOD2:
            mRichter.MOD2.setPhaseSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case tempoSyncMOD2:
            mRichter.MOD2.setTempoSyncSwitch(newValue < 0.5 ? true : false);
            break;
            
        case waveMOD2:
            mRichter.MOD2.setWave(round(newValue));
            break;
            
        case depthMOD2:
            mRichter.MOD2.setDepth(TranslateParam_Norm2Inter(newValue, DEPTH_MIN, DEPTH_MAX));
            break;
            
        case freqMOD2:
            mRichter.MOD2.setFreq(TranslateParam_Norm2Inter(newValue, FREQ_MIN, FREQ_MAX));
            break;
            
        case phaseMOD2:
            mRichter.MOD2.setManualPhase(TranslateParam_Norm2Inter(newValue, PHASE_MIN, PHASE_MAX));
            break;
            
        case tempoNumerMOD2:
            mRichter.MOD2.setTempoNumer(newValue);
            break;
            
        case tempoDenomMOD2:
            mRichter.MOD2.setTempoDenom(newValue);
            break;
            
            
            
        case stereo:
            mRichter.setStereo(newValue < 0.5 ? true : false);
            break;
            
        case masterVol:
            mRichter.setMasterVol(TranslateParam_Norm2Inter(newValue, MASTERVOL_MIN, MASTERVOL_MAX));
            break;
            
            
        default:
            break;
            
            
    }
    
}

const String RichterAudioProcessor::getParameterName (int index)
{
    switch (index) {
        case bypassSwitchLFO1:
            return SWITCHLFO1_STR;
            
        case phaseSyncLFO1:
            return PHASESYNCLFO1_STR;
            
        case tempoSyncLFO1:
            return TEMPOSYNCLFO1_STR;
            
        case waveLFO1:
            return WAVELFO1_STR;
            
        case depthLFO1:
            return DEPTHLFO1_STR;
            
        case depthModLFO1:
            return DEPTHMODLFO1_STR;
            
        case freqLFO1:
            return FREQLFO1_STR;
            
        case freqModLFO1:
            return FREQMODLFO1_STR;
            
        case phaseLFO1:
            return PHASELFO1_STR;
            
        case tempoNumerLFO1:
            return TEMPONUMERLFO1_STR;
            
        case tempoDenomLFO1:
            return TEMPODENOMLFO1_STR;
            
            
            
            
        case bypassSwitchLFO2:
            return SWITCHLFO2_STR;
            
        case phaseSyncLFO2:
            return PHASESYNCLFO2_STR;
            
        case tempoSyncLFO2:
            return TEMPOSYNCLFO2_STR;
            
        case waveLFO2:
            return WAVELFO2_STR;
            
        case depthLFO2:
            return DEPTHLFO2_STR;
            
        case depthModLFO2:
            return DEPTHMODLFO2_STR;
            
        case freqLFO2:
            return FREQLFO2_STR;
            
        case freqModLFO2:
            return FREQMODLFO2_STR;
            
        case phaseLFO2:
            return PHASELFO2_STR;
            
        case tempoNumerLFO2:
            return TEMPONUMERLFO2_STR;
            
        case tempoDenomLFO2:
            return TEMPODENOMLFO2_STR;
            
            
            
            
            
        case bypassSwitchMOD1:
            return SWITCHMOD1_STR;
            
        case phaseSyncMOD1:
            return PHASESYNCMOD1_STR;
            
        case tempoSyncMOD1:
            return TEMPOSYNCMOD1_STR;
            
        case waveMOD1:
            return WAVEMOD1_STR;
            
        case depthMOD1:
            return DEPTHMOD1_STR;
            
        case freqMOD1:
            return FREQMOD1_STR;
            
        case phaseMOD1:
            return PHASEMOD1_STR;
            
        case tempoNumerMOD1:
            return TEMPONUMERMOD1_STR;
            
        case tempoDenomMOD1:
            return TEMPODENOMMOD1_STR;
            
            
            
            
            
        case bypassSwitchMOD2:
            return SWITCHMOD2_STR;
            
        case phaseSyncMOD2:
            return PHASESYNCMOD2_STR;
            
        case tempoSyncMOD2:
            return TEMPOSYNCMOD2_STR;
            
        case waveMOD2:
            return WAVEMOD2_STR;
            
        case depthMOD2:
            return DEPTHMOD2_STR;
            
        case freqMOD2:
            return FREQMOD2_STR;
            
        case phaseMOD2:
            return PHASEMOD2_STR;
            
        case tempoNumerMOD2:
            return TEMPONUMERMOD2_STR;
            
        case tempoDenomMOD2:
            return TEMPODENOMMOD2_STR;
            
            
            
            
        case stereo:
            return STEREO_STR;
            
            
        case masterVol:
            return MASTERVOL_STR;
            
        default:
            return String::empty;
    }
}

const String RichterAudioProcessor::getParameterText (int index)
{
    switch (index) {
        case bypassSwitchLFO1:
            return String(mRichter.LFO1.getBypassSwitch());
            
        case phaseSyncLFO1:
            return String(mRichter.LFO1.getPhaseSyncSwitch());
            
        case tempoSyncLFO1:
            return String(mRichter.LFO1.getTempoSyncSwitch());
            
        case waveLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getWave(), WAVE_MIN, WAVE_MAX));
            
        case depthLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getDepth(), DEPTH_MIN, DEPTH_MAX));
                          
        case depthModLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getDepthMod(), DEPTHMOD_MIN, DEPTHMOD_MAX));
            
        case freqLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getFreq(), FREQ_MIN, FREQ_MAX));
            
        case freqModLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getFreqMod(), FREQMOD_MIN, FREQMOD_MAX));
            
        case phaseLFO1:
            return String(TranslateParam_Inter2Norm(mRichter.LFO1.getManualPhase(), PHASE_MIN, PHASE_MAX));
            
        case tempoNumerLFO1:
            return String(mRichter.LFO1.getTempoNumer());
            
        case tempoDenomLFO1:
            return String(mRichter.LFO1.getTempoDenom());
            
            
            
            
            
        case bypassSwitchLFO2:
            return String(mRichter.LFO2.getBypassSwitch());
            
        case phaseSyncLFO2:
            return String(mRichter.LFO2.getPhaseSyncSwitch());
            
        case tempoSyncLFO2:
            return String(mRichter.LFO2.getTempoSyncSwitch());
            
        case waveLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getWave(), WAVE_MIN, WAVE_MAX));
            
        case depthLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getDepth(), DEPTH_MIN, DEPTH_MAX));
            
        case depthModLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getDepthMod(), DEPTHMOD_MIN, DEPTHMOD_MAX));
            
        case freqLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getFreq(), FREQ_MIN, FREQ_MAX));
            
        case freqModLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getFreqMod(), FREQMOD_MIN, FREQMOD_MAX));
            
        case phaseLFO2:
            return String(TranslateParam_Inter2Norm(mRichter.LFO2.getManualPhase(), PHASE_MIN, PHASE_MAX));
            
        case tempoNumerLFO2:
            return String(mRichter.LFO2.getTempoNumer());
            
        case tempoDenomLFO2:
            return String(mRichter.LFO2.getTempoDenom());
            
            
            
            
            
        case bypassSwitchMOD1:
            return String(mRichter.MOD1.getBypassSwitch());
            
        case phaseSyncMOD1:
            return String(mRichter.MOD1.getPhaseSyncSwitch());
            
        case tempoSyncMOD1:
            return String(mRichter.MOD1.getTempoSyncSwitch());
            
        case waveMOD1:
            return String(TranslateParam_Inter2Norm(mRichter.MOD1.getWave(), WAVE_MIN, WAVE_MAX));
            
        case depthMOD1:
            return String(TranslateParam_Inter2Norm(mRichter.MOD1.getDepth(), DEPTH_MIN, DEPTH_MAX));
            
        case freqMOD1:
            return String(TranslateParam_Inter2Norm(mRichter.MOD1.getFreq(), FREQ_MIN, FREQ_MAX));
            
        case phaseMOD1:
            return String(TranslateParam_Inter2Norm(mRichter.MOD1.getManualPhase(), PHASE_MIN, PHASE_MAX));
            
        case tempoNumerMOD1:
            return String(mRichter.MOD1.getTempoNumer());
            
        case tempoDenomMOD1:
            return String(mRichter.MOD1.getTempoDenom());
            
            
            
            
            
        case bypassSwitchMOD2:
            return String(mRichter.MOD2.getBypassSwitch());
            
        case phaseSyncMOD2:
            return String(mRichter.MOD2.getPhaseSyncSwitch());
            
        case tempoSyncMOD2:
            return String(mRichter.MOD2.getTempoSyncSwitch());
            
        case waveMOD2:
            return String(TranslateParam_Inter2Norm(mRichter.MOD2.getWave(), WAVE_MIN, WAVE_MAX));
            
        case depthMOD2:
            return String(TranslateParam_Inter2Norm(mRichter.MOD2.getDepth(), DEPTH_MIN, DEPTH_MAX));
            
        case freqMOD2:
            return String(TranslateParam_Inter2Norm(mRichter.MOD2.getFreq(), FREQ_MIN, FREQ_MAX));
            
        case phaseMOD2:
            return String(TranslateParam_Inter2Norm(mRichter.MOD2.getManualPhase(), PHASE_MIN, PHASE_MAX));
            
        case tempoNumerMOD2:
            return String(mRichter.MOD2.getTempoNumer());
            
        case tempoDenomMOD2:
            return String(mRichter.MOD2.getTempoDenom());
            
            
            
            
        case stereo:
            return String(mRichter.getStereo());
            
        case masterVol:
            return String(TranslateParam_Inter2Norm(mRichter.getMasterVol(), MASTERVOL_MIN, MASTERVOL_MAX));
            
        default:
            return String::empty;
            
    }
}


bool RichterAudioProcessor::isParameterAutomatable(int parameterIndex) const {
    switch (parameterIndex) {
        case bypassSwitchLFO1:
        case bypassSwitchLFO2:
        case bypassSwitchMOD1:
        case bypassSwitchMOD2:
        case tempoSyncLFO1:
        case tempoSyncLFO2:
        case tempoSyncMOD1:
        case tempoSyncMOD2:
        case phaseSyncLFO1:
        case phaseSyncLFO2:
        case phaseSyncMOD1:
        case phaseSyncMOD2:
        case waveLFO1:
        case waveLFO2:
        case waveMOD1:
        case waveMOD2:
        case stereo:
            return false;
            
        default:
            return true;
    }
}

const String RichterAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String RichterAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool RichterAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool RichterAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool RichterAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool RichterAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool RichterAudioProcessor::silenceInProducesSilenceOut() const
{
    return true;
}

double RichterAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int RichterAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int RichterAudioProcessor::getCurrentProgram()
{
    return 0;
}

void RichterAudioProcessor::setCurrentProgram (int index)
{
}

const String RichterAudioProcessor::getProgramName (int index)
{
    return String();
}

void RichterAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void RichterAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    mRichter.LFO1.reset();
    mRichter.LFO2.reset();
    mRichter.MOD1.reset();
    mRichter.MOD2.reset();
    mRichter.resetSamplesProcessed();
}

void RichterAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}


void RichterAudioProcessor::reset()
{
    mRichter.LFO1.reset();
    mRichter.LFO2.reset();
    mRichter.MOD1.reset();
    mRichter.MOD2.reset();
    mRichter.resetSamplesProcessed();
}


void RichterAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
    
    mRichter.LFO1.setWaveTablePointers();
    mRichter.LFO2.setWaveTablePointers();
    mRichter.MOD1.setWaveTablePointers();
    mRichter.MOD2.setWaveTablePointers();
    
    if (mRichter.getMasterVol() < MASTERVOL_MIN) {
        mRichter.setMasterVol(MASTERVOL_MIN);
    } else if (mRichter.getMasterVol() > MASTERVOL_MAX) {
        mRichter.setMasterVol(MASTERVOL_MAX);
    }

    juce::AudioPlayHead::CurrentPositionInfo mTempoInfo;
    getPlayHead()->getCurrentPosition(mTempoInfo);
    
    mRichter.MOD1.calcFreq(mTempoInfo.bpm);
    mRichter.MOD2.calcFreq(mTempoInfo.bpm);
    
    mRichter.MOD1.calcPhaseOffset(mTempoInfo.timeInSeconds);
    mRichter.MOD2.calcPhaseOffset(mTempoInfo.timeInSeconds);
    
    mRichter.LFO1.calcFreq(mTempoInfo.bpm);
    mRichter.LFO2.calcFreq(mTempoInfo.bpm);
    
    mRichter.LFO1.calcPhaseOffset(mTempoInfo.timeInSeconds);
    mRichter.LFO2.calcPhaseOffset(mTempoInfo.timeInSeconds);
    
    mRichter.LFO1.calcSamplesPerTremoloCycle(getSampleRate());
    mRichter.LFO2.calcSamplesPerTremoloCycle(getSampleRate());
    mRichter.MOD1.calcSamplesPerTremoloCycle(getSampleRate());
    mRichter.MOD2.calcSamplesPerTremoloCycle(getSampleRate());
    
    mRichter.LFO1.calcNextScale();
    mRichter.LFO2.calcNextScale();
    mRichter.MOD1.calcNextScale();
    mRichter.MOD2.calcNextScale();
    

    
    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    if (getNumInputChannels() == 1 && getNumOutputChannels() == 1) {
        float* inSample {buffer.getWritePointer(0)};
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mRichter.ClockProcess1in1out(&inSample[iii], iii);
        }
    } else if (getNumInputChannels() == 1 && getNumOutputChannels() == 2) {
        float* inLeftSample {buffer.getWritePointer(0)};
        float* inRightSample {buffer.getWritePointer(1)};
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mRichter.ClockProcess1in2out(&inLeftSample[iii], &inRightSample[iii], iii);
        }
    } else if (getNumInputChannels() == 2 && getNumOutputChannels() == 2) {
        float* inLeftSample {buffer.getWritePointer(0)};
        float* inRightSample {buffer.getWritePointer(1)};
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mRichter.ClockProcess2in2out(&inLeftSample[iii], &inRightSample[iii], iii);
        }
    }
    
}

//==============================================================================
bool RichterAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* RichterAudioProcessor::createEditor()
{
    return new RichterAudioProcessorEditor (*this);
}

//==============================================================================
void RichterAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    XmlElement root("Root");
    XmlElement *el {nullptr};
    //std::unique_ptr<XmlElement> el(nullptr);
    
    el = root.createNewChildElement(SWITCHLFO1_STR);
    el->addTextElement(String(mRichter.LFO1.getBypassSwitch()));
    
    el = root.createNewChildElement(PHASESYNCLFO1_STR);
    el->addTextElement(String(mRichter.LFO1.getPhaseSyncSwitch()));
    
    el = root.createNewChildElement(TEMPOSYNCLFO1_STR);
    el->addTextElement(String(mRichter.LFO1.getTempoSyncSwitch()));
    
    el = root.createNewChildElement(WAVELFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getWave()));
    
    el = root.createNewChildElement(DEPTHLFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getDepth()));
    
    el = root.createNewChildElement(DEPTHMOD1_STR);
    el->createTextElement(String(mRichter.LFO1.getDepthMod()));
    
    el = root.createNewChildElement(FREQLFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getFreq()));
    
    el = root.createNewChildElement(FREQMODLFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getFreqMod()));
    
    el = root.createNewChildElement(PHASELFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getManualPhase()));
    
    el = root.createNewChildElement(TEMPONUMERLFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getTempoNumer()));
    
    el = root.createNewChildElement(TEMPODENOMLFO1_STR);
    el->createTextElement(String(mRichter.LFO1.getTempoDenom()));
    
    
    
    
    
    el = root.createNewChildElement(SWITCHLFO2_STR);
    el->addTextElement(String(mRichter.LFO2.getBypassSwitch()));
    
    el = root.createNewChildElement(PHASESYNCLFO2_STR);
    el->addTextElement(String(mRichter.LFO2.getPhaseSyncSwitch()));
    
    el = root.createNewChildElement(TEMPOSYNCLFO2_STR);
    el->addTextElement(String(mRichter.LFO2.getTempoSyncSwitch()));
    
    el = root.createNewChildElement(WAVELFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getWave()));
    
    el = root.createNewChildElement(DEPTHLFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getDepth()));
    
    el = root.createNewChildElement(DEPTHMOD1_STR);
    el->createTextElement(String(mRichter.LFO2.getDepthMod()));
    
    el = root.createNewChildElement(FREQLFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getFreq()));
    
    el = root.createNewChildElement(FREQMODLFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getFreqMod()));
    
    el = root.createNewChildElement(PHASELFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getManualPhase()));
    
    el = root.createNewChildElement(TEMPONUMERLFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getTempoNumer()));
    
    el = root.createNewChildElement(TEMPODENOMLFO2_STR);
    el->createTextElement(String(mRichter.LFO2.getTempoDenom()));
    
    
    
    
    
    
    el = root.createNewChildElement(SWITCHMOD1_STR);
    el->addTextElement(String(mRichter.MOD1.getBypassSwitch()));
    
    el = root.createNewChildElement(PHASESYNCMOD1_STR);
    el->addTextElement(String(mRichter.MOD1.getPhaseSyncSwitch()));
    
    el = root.createNewChildElement(TEMPOSYNCMOD1_STR);
    el->addTextElement(String(mRichter.MOD1.getTempoSyncSwitch()));
    
    el = root.createNewChildElement(WAVEMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getWave()));
    
    el = root.createNewChildElement(DEPTHMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getDepth()));
    
    el = root.createNewChildElement(FREQMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getFreq()));
    
    el = root.createNewChildElement(PHASEMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getManualPhase()));
    
    el = root.createNewChildElement(TEMPONUMERMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getTempoNumer()));
    
    el = root.createNewChildElement(TEMPODENOMMOD1_STR);
    el->createTextElement(String(mRichter.MOD1.getTempoDenom()));
    
    
    
    
    
    
    el = root.createNewChildElement(SWITCHMOD2_STR);
    el->addTextElement(String(mRichter.MOD2.getBypassSwitch()));
    
    el = root.createNewChildElement(PHASESYNCMOD2_STR);
    el->addTextElement(String(mRichter.MOD2.getPhaseSyncSwitch()));
    
    el = root.createNewChildElement(TEMPOSYNCMOD2_STR);
    el->addTextElement(String(mRichter.MOD2.getTempoSyncSwitch()));
    
    el = root.createNewChildElement(WAVEMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getWave()));
    
    el = root.createNewChildElement(DEPTHMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getDepth()));
    
    el = root.createNewChildElement(FREQMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getFreq()));
    
    el = root.createNewChildElement(PHASEMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getManualPhase()));
    
    el = root.createNewChildElement(TEMPONUMERMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getTempoNumer()));
    
    el = root.createNewChildElement(TEMPODENOMMOD2_STR);
    el->createTextElement(String(mRichter.MOD2.getTempoDenom()));
    
    
    
    
    el = root.createNewChildElement(STEREO_STR);
    el->createTextElement(String(mRichter.getStereo()));
    
    el = root.createNewChildElement(MASTERVOL_STR);
    el->addTextElement(String(mRichter.getMasterVol()));
    
    
    
    copyXmlToBinary(root, destData);
}

void RichterAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    std::unique_ptr<XmlElement> pRoot(getXmlFromBinary(data, sizeInBytes));
    
    if (pRoot != NULL) {
        forEachXmlChildElement((*pRoot), pChild) {
            if (pChild->hasTagName(SWITCHLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(bypassSwitchLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(PHASESYNCLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseSyncLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPOSYNCLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoSyncLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(WAVELFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(waveLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHMODLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthModLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(FREQLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(FREQMODLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqModLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(PHASELFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPONUMERLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoNumerLFO1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPODENOMLFO1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoDenomLFO1, text.getFloatValue());
            }
            
            
            
            
            else if (pChild->hasTagName(SWITCHLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(bypassSwitchLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(PHASESYNCLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseSyncLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPOSYNCLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoSyncLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(WAVELFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(waveLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHMODLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthModLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(FREQLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(FREQMODLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqModLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(PHASELFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPONUMERLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoNumerLFO2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPODENOMLFO2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoDenomLFO2, text.getFloatValue());
            }
            
            
            
            
            
            else if (pChild->hasTagName(SWITCHMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(bypassSwitchMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(PHASESYNCMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseSyncMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPOSYNCMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoSyncMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(WAVEMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(waveMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(FREQMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(PHASEMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPONUMERMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoNumerMOD1, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPODENOMMOD1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoDenomMOD1, text.getFloatValue());
            }
            
            
            
            
            else if (pChild->hasTagName(SWITCHMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(bypassSwitchMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(PHASESYNCMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseSyncMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPOSYNCMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoSyncMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(WAVEMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(waveMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(DEPTHMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(depthMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(FREQMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(freqMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(PHASEMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(phaseMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPONUMERMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoNumerMOD2, text.getFloatValue());
            } else if (pChild->hasTagName(TEMPODENOMMOD2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tempoDenomMOD2, text.getFloatValue());
            }

            
            
            else if (pChild->hasTagName(STEREO_STR)) {
                String text = pChild->getAllSubText();
                setParameter(stereo, text.getFloatValue());
            } else if (pChild->hasTagName(MASTERVOL_STR)) {
                String text = pChild->getAllSubText();
                setParameter(masterVol, text.getFloatValue());
            }
            
        }
        
        UIUpdateFlag = true;
    }
    
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new RichterAudioProcessor();
}
