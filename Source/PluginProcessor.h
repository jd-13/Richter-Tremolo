/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include <memory>
#include "../JuceLibraryCode/JuceHeader.h"
#include "CoreJUCEPlugin/CoreAudioProcessor.h"
#include "ParameterData.h"
#include "Richter.h"



//==============================================================================
/**
*/
class RichterAudioProcessor  : public WECore::JUCEPlugin::CoreAudioProcessor
{
public:
    //==============================================================================
    RichterAudioProcessor();
    ~RichterAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void reset() override;


    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    const RichterLFOCache& getLFOCache() { return mRichter.getLFOCache(); }

    AudioParameterBool* bypassSwitchLFO1;
    AudioParameterBool* phaseSyncLFO1;
    AudioParameterBool* tempoSyncLFO1;
    AudioParameterBool* invertLFO1;
    AudioParameterInt* waveLFO1;
    AudioParameterFloat* depthLFO1;
    AudioParameterFloat* depthModLFO1;
    AudioParameterFloat* freqLFO1;
    AudioParameterFloat* freqModLFO1;
    AudioParameterFloat* phaseLFO1;
    AudioParameterInt* tempoNumerLFO1;
    AudioParameterInt* tempoDenomLFO1;

    AudioParameterBool* bypassSwitchLFO2;
    AudioParameterBool* phaseSyncLFO2;
    AudioParameterBool* tempoSyncLFO2;
    AudioParameterBool* invertLFO2;
    AudioParameterInt* waveLFO2;
    AudioParameterFloat* depthLFO2;
    AudioParameterFloat* depthModLFO2;
    AudioParameterFloat* freqLFO2;
    AudioParameterFloat* freqModLFO2;
    AudioParameterFloat* phaseLFO2;
    AudioParameterInt* tempoNumerLFO2;
    AudioParameterInt* tempoDenomLFO2;

    AudioParameterBool* bypassSwitchMOD1;
    AudioParameterBool* phaseSyncMOD1;
    AudioParameterBool* tempoSyncMOD1;
    AudioParameterBool* invertMOD1;
    AudioParameterInt* waveMOD1;
    AudioParameterFloat* depthMOD1;
    AudioParameterFloat* freqMOD1;
    AudioParameterFloat* phaseMOD1;
    AudioParameterInt* tempoNumerMOD1;
    AudioParameterInt* tempoDenomMOD1;

    AudioParameterBool* bypassSwitchMOD2;
    AudioParameterBool* phaseSyncMOD2;
    AudioParameterBool* tempoSyncMOD2;
    AudioParameterBool* invertMOD2;
    AudioParameterInt* waveMOD2;
    AudioParameterFloat* depthMOD2;
    AudioParameterFloat* freqMOD2;
    AudioParameterFloat* phaseMOD2;
    AudioParameterInt* tempoNumerMOD2;
    AudioParameterInt* tempoDenomMOD2;

    AudioParameterBool* stereo;
    AudioParameterFloat* outputGain;

private:
    Richter mRichter;

    std::vector<juce::String> _provideParamNamesForMigration() override;
    void _migrateParamValues(std::vector<float>& paramValues) override;

    void _onParameterUpdate() override;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (RichterAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
